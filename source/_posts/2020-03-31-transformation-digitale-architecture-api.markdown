---
layout: post
title: Transformation digitale. Partie 1 - API
date: 2020-03-31 12:01:38 +0300
comments: 
categories: french Transformation API software java spring logiciel
---

{% img flotte /images/API_Toolbox_for_java_developer_FR_logo.png 100 100 %}
Nous commen√ßons une s√©rie d'articles pour partager notre expertise dans la domaine de la Transformation digitale. 
La premi√®re article pr√©sente notre retour d'exp√©rience sur un tr√®s beau projet d√©velopp√© pour [Leroy Merlin Ukraine](https://leroymerlin.ua) üá∫üá¶ au cours de 2019. 
Ce projet avait pour l'objectif de permettre **la cr√©ation automatique des commandes web** accessibles aux partenaires via **API**‚ùóÔ∏è

<!-- more -->
**API** c'est un sigle en anglais **Application Programming Interface**. 
On peut imaginer une API comme un contrat type entre un fournisseur de services et plusieurs clients. 
Cela ouvre la multitude de possibilit√©s pour un syst√®me eCommerce du fournisseur.
> üìôÔ∏èÔ∏è Par exemple, le constructeur de cuisines pourrais utiliser son outil 3D existant et envoyer les commandes directement 
dans le back-office du SI de Leroy Merlin. 
Ainsi le business peut engager les nouvelles collaborations tout en assurant le contr√¥le sur les commandes et les paiements.

Le sch√©ma suivant met en √©vidence quelques outils techniques qui se trouvent dans notre boite d'outils pr√©f√©r√©s pour ce genre de projet:  
{% img /images/API_Toolbox_for_java_developer_FR.gif %}

## &#128214; Sommaire

Maintenant on expliquera plus en d√©tail chaque brique logiciel pr√©sent√© ci-dessus.

* [Architecture](#Architecture)
* [Spring](#Spring)
* [Securit√©](#Security)
* [Swagger](#Swagger)
* [G√©stion des errors avec Vnd.Errors](#error)
* [jUnit](#jUnit)
* [I18n](#i18n)
* [Packaging](#packaging)

## <a name="Architecture"></a> Architecture
En terme d'architecture nous avons opt√© pour une approche **hybride** - Microservice dans Monolithe üò±. 
Techniquement c'est un jar √† part entier avec toute la logique centr√© API (configuration, s√©curit√©, controllers REST), 
mais qui se trouve √† l'int√©rieur du monolithe. 

Pourquoi une telle approche? En fait, le d√©ploiement ind√©pendant est un processus assez d√©licat dans l'√©chelle 
d'une grande entreprise (h√©bergement, s√©cu, r√©seaux, etc.) 
Mais cette approche hybride permettra dans le futur proche d'extraire ce composant sous la forme du **fat Jar** 
ou **conteneur Docker** et le d√©ployer  comme une vraie micro-services. 

> üìôÔ∏èÔ∏è Oui, en pratique l'√©l√©gance et la beaut√© d'une technologie avanc√©e peut √™tre tr√®s limit√©e par les circonstances rigides autour de vous. 
> Mais comme des professionnels et malgr√© circonstances techniques on doit trouver des compromis ‚öñÔ∏è pour faire avancer le business.

Dans le reste, l'architecture est classique - le pure REST en JSON.

## <a name="Spring"></a> Spring

Le framework [Spring](https://spring.io) est devenu un standard de facto dans le d√©veloppement logiciel d'**entreprise** en **Java**. 
A notre avis ce framework, cr√©√© dans les ann√©es 2000 par üßë‚Äçüî¨ [Rod Jonson](https://twitter.com/springrod?lang=fr), a gagn√© la bataille contre la norme J2EE.

Nous sommes tr√®s Spring √† DevAtlant et ce framework √©tait un composant technique central dans l'architecture du projet. 
Le sous-projet **Spring.Test** s'est av√©r√© tr√®s pratique surtout lors du d√©veloppement des tests **end-to-end** et de **r√©trocompatibilit√©** de diff√©rentes versions de l'API.


## <a name="Security"></a> Securit√©

La s√©curit√© d'utilisation de l'API √©tait l'une des besoins **non-fonctionnelles** majeures dans le **Cahier de Charges** du projet.
> üìôÔ∏è La **performance ‚è∞** et l'**audit üîé**  √©taient 2 autres besoins non-fonctionnelles clairement exprim√©s par le client. 
>Cela constituera une article enti√®re dans notre s√©rie consacr√©e √† ce sujet.

La pi√®ce centrale du module de s√©curit√© est un **Header HTTP d√©di√©** qui sert √† authentifier et autoriser l'acc√®s. 
Ce header contient la **cl√© s√©cr√®te unique** üîë. Chaque partenaire re√ßoit sa propre cl√© pour chaque type d'**environnement** (dev, recette, production).

```
SECRET_API_KEY=A9890-C65B899-AA00011
```

Le probl√©matique majeur c'est la provenance de cette cl√© s√©cr√®te. Qui doit le g√©n√©rer et attribuer √† chaque partenaire ? 
Pour les solutions automatis√©es nous recommandons l'utilisation de la technologie 
[oAuth 2.0 boost√© par Spring](https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/html/boot-features-security-oauth2-authorization-server.html). 
Pour le nombre limit√© des clients de vos API, vous pouvez g√©n√©rer et stocker la cl√© √† la demande dans la configuration de serveur.   

## <a name="Swagger"></a> Swagger

Sur tous nos projets on applique les principes d'**industrialisation üèó du g√©nie logiciel**. L'un de ces principes est l'**automatisation**. 
>Pour le code source on utilise ```Maven, GitLab, Jenkins, Sonar Qube, Nexus```. Rien de nouveau ici.

Mais la question de la **qualit√© de la documentation** se pose tr√®s souvent dans tous les projets plus ou moins complexes. 
Et cette question devient cruciale quand on parle de l'API, o√π la qualit√© de la documentation doit √™tre toujours **impeccable**, 
car la doc est utilis√©e par plusieurs √©quipes **externes**‚ùóÔ∏è De l'autre cot√©, soyons franc, les d√©veloppeurs n'aiment pas √©crire ü§Æ –µt 
surtout maintenir √† jour la documentation du projet üÜò. Nous avons trouv√© une solution √† ce paradoxe - le projet [Swagger](https://swagger.io) ‚úÖ

Swagger permet d'incorporer les ```annotations``` sp√©cialis√©es autour de vos m√©thodes du ```@RestController```. 
Et ces annotations sont utilis√©s lors de la g√©n√©ration de la documentation. 
Un immense avantage du Swagger  c'est la documentation que les partenaires peuvent ex√©cuter lors de la phase d'exploration de votre API. 
Et nous avons remarqu√© que nos d√©veloppeurs sont tr√®s √† l'aise avec cette approche qui ne ressemble pas du tout √† l'√©laboration du document Word fade et sans etat d'√¢me. 
Comme r√©sultat on a une documentation:

1. g√©n√©r√©e automatiquement lors du build Jenkins √† partir du code source‚úÖ
2. pr√©cise et √† jour ‚úÖ
3. se d√©ploie automatiquement sur le serveur d'int√©gration ‚úÖ
4. les √©quipes de d√©vs des partenaires peuvent faire leurs tests en autonomie ‚úÖ

## <a name="error"></a> G√©stion des erreurs avec Vnd.Errors

Nous pensons que c'est inutile d'expliquer l'importance de communication des erreurs aux client de votre API. 
Bien s√ªr, vous pouvez inventer votre _propre structure ou mod√®le des codes et messages de retour_, 
mais si vous utilisez Spring, nous vous recommandons de jeter un ≈ìil sur le projet [VND.errors](https://github.com/blongden/vnd.error) (qui fait partie du project [Spring Hateoas](https://docs.spring.io/spring-hateoas/docs/current/reference/html/)).

{% img /images/consoleVnd.png %}

Maven config
```xml
        <!-- VndError for REST API error handling -->
        <dependency> 
            <groupId>org.springframework.hateoas</groupId>
            <artifactId>spring-hateoas</artifactId>
            <version>0.25.1.RELEASE</version>
        </dependency>
```

Voici quelques r√®gles de base qu'on suit lors de cette phase:
S√©parer les erreurs techniques et les erreurs m√©tiers en introduisant    

https://docs.spring.io/spring-hateoas/docs/0.25.3.BUILD-SNAPSHOT/api/org/springframework/hateoas/VndErrors.VndError.html

## <a name="jUnit"></a> jUnit
## <a name="I18n"></a> i18n
## <a name="Packaging"></a> packaging




